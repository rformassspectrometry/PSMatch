% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fragments-calculate.R
\name{calculateFragments}
\alias{calculateFragments}
\alias{defaultNeutralLoss}
\alias{calculateFragments,character,missing-method}
\title{Calculate ions produced by fragmentation}
\usage{
\S4method{calculateFragments}{character,missing}(
  sequence,
  type = c("b", "y"),
  z = 1,
  modifications = c(C = 57.02146),
  neutralLoss = defaultNeutralLoss(),
  verbose = TRUE
)
}
\arguments{
\item{sequence}{character() providing a peptide sequence. ProForma delta
masses are supported (e.g. \code{"EM[+15.9949]EVEES[-79.9663]PEK"}).}

\item{type}{\code{character} vector of target ions; possible values:
\code{c("a", "b", "c", "x", "y", "z")}. Default is \code{type = c("b", "y")}.}

\item{z}{\code{numeric} with desired charge state; default is 1.}

\item{modifications}{A named \code{numeric} vector of used
modifications. The name must correspond to the one-letter-code
of the modified amino acid and the \code{numeric} value must
represent the mass that should be added to the original amino
accid mass, default: Carbamidomethyl \code{modifications = c(C = 57.02146)}. Use \code{Nterm} or \code{Cterm} as names for modifications
that should be added to the amino respectively
carboxyl-terminus.}

\item{neutralLoss}{\code{list}, it has to have two named elments,
namely \code{water} and \code{ammonia} that contain a \code{character} vector
which type of neutral loss should be calculated.  Currently
neutral loss on the C terminal \code{"Cterm"}, at the amino acids
\code{c("D", "E", "S", "T")} for \code{"water"} (shown with an \verb{_}) and
\code{c("K", "N", "Q", "R")} for \code{"ammonia"} (shown with an \code{*}) are
supported.

\if{html}{\out{<div class="sourceCode">}}\preformatted{There is a helper function `defaultNeutralLoss()` that returns
the correct list. It has two arguments `disableWaterLoss` and
`disableAmmoniaLoss` to remove single neutral loss options. See
the example section for use cases.
}\if{html}{\out{</div>}}}

\item{verbose}{\code{logical(1)}. If \code{TRUE} (default) the used
modifications are printed.}
}
\value{
The methods with \code{oject = "missing"} returns a
\code{data.frame}.
}
\description{
These method calculates a-, b-, c-, x-, y- and z-ions produced by
fragmentation.

Available methods
\itemize{
\item The default method with signature \code{sequence = "character"} and
\code{object = "missing"} calculates the theoretical fragments for a
peptide sequence. It returns a \code{data.frame} with the columns
\code{mz}, \code{ion}, \code{type}, \code{pos}, \code{z} and \code{seq}.
\item Additional method can be defined that will adapt their behaviour
based on spectra defined in \code{object}. See for example the MSnbase
package that implements a method for objects of class
\code{Spectrum2}.
}
}
\examples{

## calculate fragments for ACE with default modification
calculateFragments("ACE", modifications = c(C = 57.02146))

## calculate fragments for ACE with an addition N-terminal modification
calculateFragments("ACE", modifications = c(C = 57.02146, Nterm = 229.1629))

## calculate fragments for ACE without any modifications
calculateFragments("ACE", modifications = NULL)

calculateFragments("VESITARHGEVLQLRPK",
                   type = c("a", "b", "c", "x", "y", "z"),
                   z = 1:2)

## neutral loss
defaultNeutralLoss()

## disable water loss on the C terminal
defaultNeutralLoss(disableWaterLoss="Cterm")

## real example
calculateFragments("PQR")
calculateFragments("PQR",
                   neutralLoss=defaultNeutralLoss(disableWaterLoss="Cterm"))
calculateFragments("PQR",
                   neutralLoss=defaultNeutralLoss(disableAmmoniaLoss="Q"))

## disable neutral loss completely
calculateFragments("PQR", neutralLoss=NULL)

## ProForma encoded delta masses
calculateFragments("EM[+15.9949]EVEES[-79.9663]PEK")
}
\references{
\href{http://www.psidev.info/proforma}{HUPO-PSI ProForma specification}
}
\author{
Sebastian Gibb \href{mailto:mail@sebastiangibb.de}{mail@sebastiangibb.de}
}
